[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "memento"
version = "0.1.0"
description = "A Meta-Cognitive Framework for Self-Evolving System Prompts in AI Systems"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jaroslaw Nowosad", email = "jaroslaw.nowosad@huawei.com"}
]
maintainers = [
    {name = "Jaroslaw Nowosad", email = "jaroslaw.nowosad@huawei.com"}
]
keywords = [
    "ai", "llm", "prompt-engineering", "meta-cognitive", "self-evolving", 
    "machine-learning", "artificial-intelligence", "nlp"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=0.24.0",
    "pydantic>=2.0.0",
    "ollama>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "tqdm>=4.62.0",
    "python-dotenv>=0.19.0",
    "requests>=2.25.0",
    "aiohttp>=3.8.0",
    "redis>=4.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
]
benchmark = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/yarenty/prompt_learning"
Documentation = "https://memento.readthedocs.io"
Repository = "https://github.com/yarenty/prompt_learning.git"
"Bug Tracker" = "https://github.com/yarenty/prompt_learning/issues"
"Research Paper" = "https://arxiv.org/abs/XXXX.XXXXX"

[project.scripts]
memento = "memento.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["memento*"]

[tool.setuptools.package-data]
memento = ["py.typed"]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["memento"]
known_third_party = ["numpy", "pandas", "scikit-learn", "pydantic", "ollama"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["ollama.*", "openai.*", "anthropic.*", "redis.*", "sqlalchemy.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    # "--cov=memento",
    # "--cov-report=term-missing",
    # "--cov-report=html",
    # "--cov-report=xml",
    # "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["memento"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.safety]
policy = "strict"

# Pre-commit configuration moved to .pre-commit-config.yaml
# Run: pre-commit install
